#Written by Janif Kader

import random #Import random module
yes_No = "Y" #Initializes yes_No (whether or not user want to keep playing)
one_wins = 0 #Initializes one_wins (how many wins player 1 has)
two_wins = 0 #Initializes two_wins (how many wins player 2 has)
ties = 0 #Initializes ties (how many ties there are)

# Function that creates the board
def create_board(top_left,top_mid,top_right,mid_left,mid_mid,mid_right,bot_left,bot_mid,bot_right): #Takes each position as a parameter
  print(top_left,"|",top_mid,"|",top_right)
  print("---------")
  print(mid_left,"|",mid_mid,"|",mid_right)
  print("---------")
  print(bot_left,"|",bot_mid,"|",bot_right)

# Function that checks if there is a winner
def win_check(piece,top_left,top_mid,top_right,mid_left,mid_mid,mid_right,bot_left,bot_mid,bot_right): #Takes each position as well as the piece as parameters
  win = False
  if top_left == piece and top_mid == piece and top_right == piece:
    win = True #Win if the top row has three of the same pieces
  elif mid_left == piece and mid_mid == piece and mid_right == piece:
    win = True #Win if the middle row has three of the same pieces
  elif bot_left == piece and bot_mid == piece and bot_right == piece:
    win = True #Win if the bottom row has three of the same pieces
  elif top_left == piece and mid_left == piece and bot_left == piece:
    win = True #Win if the left column has three of the same pieces
  elif top_mid == piece and mid_mid == piece and bot_mid == piece:
    win = True #Win if the middle column has three of the same pieces
  elif top_right == piece and mid_right == piece and bot_right == piece:
    win = True #Win if the right column has three of the same pieces
  elif top_right == piece and mid_mid == piece and bot_left == piece:
    win = True #Win if the right diagonal has three of the same pieces
  elif top_left == piece and mid_mid == piece and bot_right == piece:
    win = True #Win if the left diagonal has three of the same pieces
  return win #Returns win status

#Intro to the game
print("""Welcome to Tic-Tac-Toe.
This classic game has you and a friend take turns
placing pieces on a 3X3 Grid until someone gets 3 in a row.
That person wins. 
Type the numbers 1-9 to place your piece on a specific spot
The numbers which correspond to each spot is pictured below
""")
create_board(1,2,3,4,5,6,7,8,9) #Tells players which number corresponds to which position
print()
print("Let's get started! ")
print()

#Loops while user agrees to keep playing
while yes_No == "Y":
  top_left = " " #Initializes top left position
  top_mid = " " #Initializes top middle position
  top_right = " " #Initializes top right position
  mid_left = " " #Initializes middle left position
  mid_mid = " " #Initializes middle position
  mid_right = " " #Initializes middle right position
  bot_left = " " #Initializes bottom left position
  bot_mid = " " #Initializes bottom middle position
  bot_right = " " #Initializes bottom right position
  win = False #Initializes win condition
  turn = 0 #Initializes turn number 
  choice_two = "" #Initializes player two piece

  while True:
    #Asks user if they would like to choose their own pieces, or have it be random
    piece_choice = input("""How would you like to choose your pieces
    1. Choose them yourserlf
    2. Randomize 
    (1/2): """)
    if piece_choice == "1" or piece_choice == "2":
       break #Keeps looping until they pick 1 or 2
    else:
      print("Pick option 1 or 2. ")
  if piece_choice == "1": # Executes if they want to choose the pieces themselves
    while True:
      choice = input("Would Player 1 like to be X or O (X/O): ") #Asks player if they want to be X or O
      if choice == "X" or choice == "O": # Keeps running until the player inputs X or O
        if choice == "X": #If player 1 chooses X, player 2 gets O
          choice_two = "O"
        elif choice == "O": #If player 1 chooses O, player 2 gets X
          choice_two = "X"
        break
      else:
        print()
        print("X or O")
        print()
  else:
    cpu_choice = random.randint(1, 2) #If the user chooses to randomize, the code will generate a random number between 1 and 2
    if cpu_choice == 1: #If the cpu chooses 1, player 1 gets X, player 2 gets O
      choice = "X"
      choice_two = "O"
    else: #If the cpu chooses 2, player 1 gets O, player 2 gets X
      choice = "O"
      choice_two = "X"
  while win == False:
    turn += 1 #Adds one to the turn number when the loop is repeated
    if turn%2 != 0: #If the turn is not an even number (meaning it is player 1's turn) It will have the piece equal player 1's piece
      piece = choice
    else: #If the turn is an even number (meaning it is player 2's turn) It will have the piece equal player 2's piece
      piece = choice_two
    while True: #Loops while the user does not provide a valid position (One that is not already taken)
      while True:
        try: #Try-except to catch unexpected input
          user = input("Where would you like to place your piece (1-9): ") #Asks the user which position they would like to place their piece in
          if int(user) >= 1 and int(user) <= 9: #Keeps running unless they input an integer from 1-9
            break
        except:
          print("Must be a number between 1 and 9")
      spot_taken = 1 # Sets spot taken to 1 (Which means a spot is not taken)
      if user == "1": #Depending on the user's answer, the piece will be placed in the corresponding position
        if top_left != " ":
          spot_taken = 0 #If the position is taken, it resets spot_taken
        else:
          top_left = piece #Puts the piece in the position
      elif user == "2":
        if top_mid != " ":
          spot_taken = 0
        else:
          top_mid = piece
      elif user == "3":
        if top_right != " ":
          spot_taken = 0
        else:
          top_right = piece
      elif user == "4":
        if mid_left != " ":
          spot_taken = 0
        else:
          mid_left = piece
      elif user == "5":
        if mid_mid != " ":
          spot_taken = 0
        else:
          mid_mid = piece
      elif user == "6":
        if mid_right != " ":
          spot_taken = 0
        else:
          mid_right = piece
      elif user == "7":
        if bot_left != " ":
          spot_taken = 0
        else:
          bot_left = piece
      elif user == "8":
        if bot_mid != " ":
          spot_taken = 0
        else:
          bot_mid = piece
      elif user == "9":
        if bot_right != " ":
          spot_taken = 0
        else:
          bot_right = piece
      if spot_taken == 1: #Executes if the spot was open
        create_board(top_left,top_mid,top_right,mid_left,mid_mid,mid_right,bot_left,bot_mid,bot_right) #Creates the new board
        break
      else:
        print()
        print("That spot is already taken!")
        print()
    win = win_check(piece,top_left,top_mid,top_right,mid_left,mid_mid,mid_right,bot_left,bot_mid,bot_right) #Checks if there is a winner
    if turn == 9: #Breaks loop if there have been 9 turns and no winner (indicating a tie)
      break
  if piece == choice and win == True: #Executes if Player 1 won the game
    print()
    print("Player 1 (",choice,") won!")
    print()
    one_wins += 1
  elif piece == choice_two and win == True: #Executes if Player 2 won the game
    print()
    print("Player 2 (",choice_two,") won!")
    print()
    two_wins += 1
  elif turn == 9: #Executes if there was a tie
    print()
    print("You Tied! ")
    print()
    ties += 1
  while True: #Loops while user does not reply with Y or N
    yes_No = input("Would you like to play again (Y/N): ") #Asks the user if they would like to play again
    if yes_No == "Y" or yes_No == "N":
      break
print("Score:") #Prints out final results
print("Player 1:", one_wins)
print("Player 2:", two_wins)
print("Ties:", ties)